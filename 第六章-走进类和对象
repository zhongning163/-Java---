怎样确定实例变量？
1.选择：包括这个类命名规范内所代表的所有对象的变量；剔除所有不具有代表性的变量，这些实例变量是用来执行这个类对所有对象进行的运算和操作
2.访问权：为具有封装性，一般情况下，实例变量的访问权定义为private
3.是否静态：若某个变量不依赖于对象而存在，属于这个类，则定义为静态

编译器对实例变量自动赋予系统预设的初始值，对整数类型变量赋予0，浮点类型变量赋予0.0，字符赋予空，布尔型变量赋予false，字符串变量和对象赋予null

构造器是方法的特例。构造器的主要目的是在创建对象时，对其变量初始化。构造器与类名相同。

构造器不允许返回任何数据，也不使用void，构造器在创建这个类的对象时被自动调用

如果类中没有定义构造器，Java编译器将提供一个系统预设的构造器，这个构造器来源所有类的始祖Object，Object构造器实际上是一个无参数的空程序体，
但若类中定义了构造器，编译器则不提供这个服务。

为了减少对参数命名的麻烦和增加代码的可读性，在构造器中经常使用关键字this来区分参数名（函数定义时括号里的内容）和实例变量名（即对象的名字）
如：public Rectangle(int width,int height)
{
  this.width=width;
  this.height=height;
}
创建对象：Rectangle rec=new Rectangle(12,50);    关键字this在这个代码中则代表rec

构造器创建对象的过程称为实例化

构造器重载是指在一个类中，具有两个或多个构造器，这些构造器以不同的参数（类型，参数多少，参数次序）作为区别的标志或签名，
每个构造器执行对不同变量初始化的任务。编译器判断重载是否合法的依据是构造器是否具有不同的签名。

构造器重载的目的是在程序中更加灵活的创建不同参数的对象，还可以减少代码编写的工作量

参数名不是签名的部分

除构造器是方法的特例，方法可分为两种：实例方法和静态方法。
  实例方法代表对象行为，执行对象要进行的运算和操作
  静态方法也称为类方法，代表整个类的行为，执行这个类的所有对象都可参与的运算和操作
  
  


